#![allow(unused_variables)]

#[allow(dead_code)]
mod cpu;
mod memory;
mod addressing;
mod input;


use std::thread;
use std::time::Duration;
use rand::Rng;
use sdl2::pixels::{Color, PixelFormatEnum};
use cpu::*;
use crate::input::handle_user_input;

/**
https://bugzmanov.github.io/nes_ebook/chapter_1.html
3.4 链接依赖失败  https://crates.io/crates/sdl2/0.36.0
 */

fn color(byte: u8) -> Color {
    match byte {
        0 => Color::BLACK,
        1 => Color::WHITE,
        2 | 9 => Color::GREY,
        3 | 10 => Color::RED,
        4 | 11 => Color::GREEN,
        5 | 12 => Color::BLUE,
        6 | 13 => Color::MAGENTA,
        7 | 14 => Color::YELLOW,
        _ => Color::CYAN,
    }
}

/**
我们可以通过创建一个将从屏幕状态填充的临时缓冲区来跟踪屏幕状态。只有在屏幕发生变化的情况下，我们才会更新 SDL 画布。
*/
fn read_screen_state(cpu: &mut CPU, frame: &mut [u8; 32 * 3 * 32]) -> bool {
    let mut frame_idx = 0;
    let mut update = false;

    for i in 0x0200..0x600 {
        let color_idx = cpu.memory_read(i as u16);
        let (b1, b2, b3) = color(color_idx).rgb();
        if frame[frame_idx] != b1 ||
            frame[frame_idx + 1] != b2 ||
            frame[frame_idx + 2] != b3
        {
            frame[frame_idx] = b1;
            frame[frame_idx + 1] = b2;
            frame[frame_idx + 2] = b3;
            update = true;
        }
        frame_idx += 3;
    }

    return update;
}

fn main() {
    let sdl = sdl2::init().unwrap();
    let video_subsystem = sdl.video().unwrap();
    // 由于我们的游戏屏幕很小（32x32 像素），因此我们将比例因子设置为 10。
    let window = video_subsystem.window("Snake game", (32.0 * 10.0) as u32, (32.0 * 10.0) as u32)
        .position_centered()
        .build()
        .unwrap();
    let mut canvas = window.into_canvas()
        .present_vsync()
        .build()
        .unwrap();
    let mut event_pump = sdl.event_pump().unwrap();
    canvas.set_scale(10f32, 10f32).unwrap();
    // 创建一个用于渲染的纹理 纹理大小为 32x32，每个像素由 3 个字节表示（对于 R、G 和 B 颜色）。这意味着纹理将由 32x32x3 字节数组表示。
    let creator = canvas.texture_creator();
    let mut texture = creator.create_texture_target(PixelFormatEnum::RGB24, 32, 32).unwrap();

    // 游戏代码
    let game_code = vec![
        0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02,
        0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9,
        0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85,
        0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20,
        0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c,
        0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0,
        0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60, 0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85,
        0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01,
        0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05,
        0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06, 0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00,
        0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20,
        0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11,
        0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c, 0x35, 0x07, 0x60,
        0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0,
        0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20,
        0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
        0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10,
        0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5,
        0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe,
        0x91, 0x00, 0x60, 0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10,
        0x60, 0xa6, 0xff, 0xea, 0xea, 0xca, 0xd0, 0xfb, 0x60,
    ];

    let mut cpu = CPU::new();
    cpu.memory_load_program(game_code);
    cpu.reset();
    let mut screen_state=[0u8;32*3*32];
    let mut rng=rand::thread_rng();
    cpu.run_with_callback(move |cpu|{
       handle_user_input(cpu,&mut event_pump);
        cpu.memory_write(0xfe,rng.gen_range(1,16));
        if read_screen_state(cpu,&mut screen_state) {
            texture.update(None,&mut screen_state,32*3).unwrap();
            canvas.copy(&texture,None,None).unwrap();
            canvas.present();
        }
        thread::sleep(Duration::new(0,70_000));
    });
}


#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_lda_immediate_load_data() {
        let mut cpu = CPU::new();
        cpu.load_and_run(vec![0xa9, 0x05, 0x00]);
        assert_eq!(cpu.register_a, 0x05);
        assert_eq!(cpu.status & 0b0000_0010, 0b00);
        assert_eq!(cpu.status & 0b1000_0000, 0);
    }

    #[test]
    fn test_lda_zero_flag() {
        let mut cpu = CPU::new();
        cpu.load_and_run(vec![0xa9, 0x00, 0x00]);
        assert_eq!(cpu.status & 0b0000_0010, 0b10);
    }

    #[test]
    fn test_sta_immediate() {
        let mut cpu = CPU::new();
        cpu.load_and_run(vec![0xa9, 0x01, 0x85, 0xff, 0x00]);
        assert_eq!(cpu.memory_read(0xff), 0x01);
    }

    #[test]
    fn test_sta_absolute_x() {
        let mut cpu = CPU::new();
        /*
        0xa9 0x10 向负载累加器写入0x10
        0xaa      将负载累加器的值负责到X寄存器
        0x9d 0x00 0xff  将负载累加器的值复制到0xff10的内存位置
        */
        // 多字节操作数要按小端顺序写入                         // 这两个操作数要按小端顺序写入
        cpu.load_and_run(vec![0xa9, 0x10, 0xaa, 0x9d, 0x00, 0xff, 0x00]);

        assert_eq!(cpu.memory_read(0xff10), 0x10);
    }

    #[test]
    fn test_inx_overflow() {
        // 越界测试
        let mut cpu = CPU::new();
        let mut program = Vec::new();
        for i in 0..0xff {
            program.push(0xE8);
        }
        program.push(0xE8);
        program.push(0x00);
        cpu.load_and_run(program);

        assert_eq!(cpu.register_x, 0);
        assert_eq!(cpu.status, 127)
    }

    #[test]
    fn test_5_ops_working_together() {
        let mut cpu = CPU::new();
        cpu.load_and_run(vec![0xa9, 0xc0, 0xaa, 0xe8, 0x00]);

        assert_eq!(cpu.register_x, 0xc1)
    }

    #[test]
    fn test_write_u16() {
        let mut cpu = CPU::new();
        cpu.memory_write_u16(0xff00, 0x1234);
        assert_eq!(cpu.memory.read(0xff00), 0x34);
        assert_eq!(cpu.memory.read(0xff01), 0x12);
    }

    #[test]
    fn test_read_u16() {
        let x = 0x1234u16;
        let mut cpu = CPU::new();
        cpu.memory.write(0xff00, 0x34);
        cpu.memory.write(0xff01, 0x12);
        assert_eq!(cpu.memory_read_u16(0xff00), 0x1234);
    }
}
